// 月黑风高的夜晚，张三开启了法外狂徒模式：他背着一个可装载重量为 W 的背包去地主家偷东西。

// 地主家有 N 个物品，每个物品有重量和价值两个属性，其中第 i 个物品的重量为 wt[i]，价值为 val[i]。

// 问张三现在用这个背包装物品，最多能装的价值是多少？

// 举例：

// N = 3 //地主家有三样东西

// wt = [2,1,3] //每样东西的重量

// val = [4,2,3] //每样东西的价值

// W = 4 //背包可装载重量

// 算法应该返回 6.

// dp[i][w] 表示：对于前i个物品，当前背包的容量为w，这种情况下可以装的最大价值是dp[i][w]

// dp[i][0] = 0
// dp[0][w] = 0

// 思考：对于当前第 i 个物品：

// 如果没有把第 i 个物品装入包里（第 i 个物品质量大于当前背包容量）：那么很显然，最大价值dp[i][w]应该等于dp[i - 1][w]，没有装进去嘛，故当前背包总价值就等于之前的结果，即第i - 1 个物品之前的总价值 。

// 如果把第 i 个物品装入了包里，那么 dp[i][w]应该等于什么呢？

// 它应该等于下面两者里的较大值：

// dp[i - 1][w] //前i - 1个物品，背包所装的最大价值

// dp[i - 1]w - wt[i]] + val [i] //当前第 i 个物品我装里边了，
// 那么此时背包装入的总价值即为：当前第 i 个物品的价值 val [i] + 第 i 个物品之前，
// 背包容量为w - wt[i]（w 减去当前第 i 个物品的质量）dp[i - 1]w - wt[i]] 时的价值

// if (wt[i] > W) {
//   dp[i][W] = dp[i - 1][W]
// } else {
//   dp[i][W] = Math.max(dp[i - 1][W], dp[i - 1][W - wt[i]] + val[i])
// }

// dp 图 很重要
function solution(wt, val, W) {
  let dp = {}
  let N = wt.length
  for (let i = 0; i <= N; i++) {
    dp[`${i}.0`] = 0
  }
  for (let j = 0; j <= W; j++) {
    dp[`0.${j}`] = 0
  }
  for (let i = 1; i <= N; i++) {
    for (let j = 0; j <= W; j++) {
      if (wt[i - 1] > j) {
        dp[`${i}.${j}`] = dp[`${i - 1}.${j}`]
      } else {
        dp[`${i}.${j}`] = Math.max(
          dp[`${i - 1}.${j}`],
          dp[`${i - 1}.${j - wt[i - 1]}`] + val[i-1]
        )
      }
    }
  }
  console.log(dp)
  return dp[`${N}.${W}`]
}

N = 3
wt = [2, 1, 3]
val = [4, 2, 3]
W = 4

console.log(solution(wt, val, W))
